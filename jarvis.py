# -*- coding: utf-8 -*-
"""JARVIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TDQ8y6JAJ2Qmzcz6RqgtAehrchy5uWNj

# Model 1
"""

from google.colab import drive
drive.mount('/content/drive')

"""Load Dataset"""

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset.csv',encoding='latin-1')
#encoding='latin-1':This argument specifies the character encoding of the CSV file.
# Using 'latin-1' resolved an error that was likely due to the file containing characters outside of the default UTF-8 encoding.

"""Feature Extraction using NLP and selecting a model

"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split


model = Pipeline([('cv', CountVectorizer()),('classifier', RandomForestClassifier())])

X_train, X_test, y_train, y_test = train_test_split(df['Speech'], df['Intent'], test_size=0.2,random_state = 42)

"""Training the Model"""

model.fit(X_train, y_train)

y_predicted = model.predict(X_test)
from sklearn.metrics import classification_report
print("Classification Report of the model :")
print(classification_report(y_test, y_predicted))
print("Model Score: " ,model.score(y_test,y_predicted))

print(X_test)
y_predicted

phrase = input("Enter the phrase to classify: ")
print(f"Category: {model.predict([phrase])[0]}")

import joblib
joblib.dump(model,'model1.pkl')

"""# Model 2"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset.csv',encoding='latin-1')
#encoding='latin-1':This argument specifies the character encoding of the CSV file.
# Using 'latin-1' resolved an error that was likely due to the file containing characters outside of the default UTF-8 encoding.


vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['Speech'])


model = LogisticRegression()

model.fit(X, df['Intent'])

print("Model Score : ",model.score(X,df['Intent']))


y_pred = model.predict(X)
print("Model Classification Report : ")
print(classification_report(df['Intent'], y_pred))

def jarvis_classifier():
    print("** Welcome to the JARVIS Classifier **")
    print("Type your phrase below, or type 'exit' to quit.")
    while True:
        try:
            user = input("Enter a phrase: ")
            if user.lower() == "exit":
                print("Goodbye :) ! ")
                print("Have a Good Day ")
                break
            user_features = vectorizer.transform([user])
            predicted_category = model.predict(user_features)
            print("Predicted Category: ", predicted_category[0])
        except ValueError as ve:
            print("ValueError encountered: ",ve," Please try again.")

jarvis_classifier()

import joblib
joblib.dump(model,'model2.pkl')